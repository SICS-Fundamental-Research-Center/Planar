#include <stdio.h>
#include <stdlib.h>
#include <lzma.h>
#include <string.h>

int main() {
    // 原始数据
    char* input_data = "Hello, World!";
    size_t input_size = strlen(input_data);

    // 分配压缩后的数据缓冲区
    size_t output_size = lzma_stream_buffer_bound(input_size);
    char* output_data = (char*)malloc(output_size);
    printf("compressed data size: %d\n", output_size);

    // 初始化压缩和解压缩器
    lzma_stream strm = LZMA_STREAM_INIT;
    lzma_ret ret = lzma_easy_encoder(&strm, 6, LZMA_CHECK_CRC64);

    // 压缩数据
    strm.next_in = (uint8_t*)input_data;
    strm.avail_in = input_size;
    strm.next_out = (uint8_t*)output_data;
    strm.avail_out = output_size;
    ret = lzma_code(&strm, LZMA_FINISH);
    printf("ret: %d\n", ret);
    // 检查压缩结果
    if (ret == LZMA_OK || ret == LZMA_SYNC_FLUSH) {
        printf("压缩成功！\n");
        printf("压缩前大小：%zu\n", input_size);
        printf("压缩后大小：%zu\n", strm.total_out);
    } else {
        printf("压缩失败！\n");
    }

    // 重置压缩和解压缩器
    lzma_end(&strm);
    strm = LZMA_STREAM_INIT;
    ret = lzma_stream_decoder(&strm, UINT64_MAX, LZMA_CONCATENATED);

    // 解压缩数据
    strm.next_in = (uint8_t*)output_data;
    strm.avail_in = strm.total_out;
    strm.next_out = (uint8_t*)input_data;
    strm.avail_out = input_size;
    ret = lzma_code(&strm, LZMA_RUN);

    // 检查解压缩结果
    if (ret == LZMA_OK) {
        printf("解压缩成功！\n");
        printf("解压缩后数据：%s\n", input_data);
    } else {
        printf("解压缩失败！\n");
    }

    // 清理资源
    free(output_data);

    return 0;
}